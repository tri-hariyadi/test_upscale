// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"net/http"
	handler2 "todo-app/apps/todo/handler"
	repository2 "todo-app/apps/todo/repository"
	service2 "todo-app/apps/todo/service"
	"todo-app/apps/user/handler"
	"todo-app/apps/user/repository"
	"todo-app/apps/user/service"
	"todo-app/common/database"
	"todo-app/common/router"
	"todo-app/common/server"
)

// Injectors from injector.go:

func InitializedServer() (*http.Server, func()) {
	pool := database.ConnectDB()
	userRepositoryImpl := repository.NewUserRepositoryImpl(pool)
	validate := NewValidator()
	userServiceImpl := service.NewUserServiceImpl(userRepositoryImpl, validate)
	userRegisterHandlerFunc := handler.NewUserHandlerImpl(userServiceImpl)
	todoRepositoryImpl := repository2.NewTodoRepositoryImpl(pool)
	todoServiceImpl := service2.NewTodoServiceImpl(todoRepositoryImpl, validate)
	todoRegisterHandlerFunc := handler2.NewTodoHandlerImpl(todoServiceImpl)
	muxRouter := router.NewRouter(userRegisterHandlerFunc, todoRegisterHandlerFunc)
	httpServer, cleanup := server.NewServer(muxRouter, pool)
	return httpServer, func() {
		cleanup()
	}
}

// injector.go:

func NewValidator() *validator.Validate {
	return validator.New()
}

var userSet = wire.NewSet(repository.NewUserRepositoryImpl, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)), service.NewUserServiceImpl, wire.Bind(new(service.UserService), new(*service.UserServiceImpl)), handler.NewUserHandlerImpl)

var todoSet = wire.NewSet(repository2.NewTodoRepositoryImpl, wire.Bind(new(repository2.TodoRepository), new(*repository2.TodoRepositoryImpl)), service2.NewTodoServiceImpl, wire.Bind(new(service2.TodoService), new(*service2.TodoServiceImpl)), handler2.NewTodoHandlerImpl)
